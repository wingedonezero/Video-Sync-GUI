# vsg_qt/widgets/options_dialog.py
from __future__ import annotations
from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QDialog, QDialogButtonBox, QVBoxLayout, QTabWidget, QWidget, QFormLayout,
    QLineEdit, QPushButton, QHBoxLayout, QSpinBox, QDoubleSpinBox, QCheckBox, QLabel, QFileDialog, QComboBox
)

class OptionsDialog(QDialog):
    def __init__(self, parent, settings):
        super().__init__(parent)
        self.setWindowTitle("Preferences")
        self.resize(820, 640)
        self.settings = settings

        vbox = QVBoxLayout(self)
        self.tabs = QTabWidget(); vbox.addWidget(self.tabs)

        self._build_storage()
        self._build_analysis()
        self._build_global()
        self._build_logging()
        self._build_appearance()

        row = QHBoxLayout()
        self.btn_reload = QPushButton("Reload from disk")
        self.btn_reload.clicked.connect(self.on_reload)
        row.addStretch(1); row.addWidget(self.btn_reload)
        vbox.addLayout(row)

        btns = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        btns.accepted.connect(self.on_save)
        btns.rejected.connect(self.reject)
        vbox.addWidget(btns)

    def _build_storage(self):
        w = QWidget(); layout = QFormLayout(w)
        self.out_edit = QLineEdit(self.settings.get("output_folder", ""))
        self.tmp_edit = QLineEdit(self.settings.get("temp_root", ""))
        b_out = QPushButton("…"); b_out.clicked.connect(lambda: self._browse_dir(self.out_edit))
        b_tmp = QPushButton("…"); b_tmp.clicked.connect(lambda: self._browse_dir(self.tmp_edit))
        layout.addRow("Output folder", self._with_browse(self.out_edit, b_out))
        layout.addRow("Temp folder", self._with_browse(self.tmp_edit, b_tmp))
        self.ffmpeg = QLineEdit(self.settings.get("ffmpeg_path", ""))
        self.ffprobe = QLineEdit(self.settings.get("ffprobe_path", ""))
        self.mkvmerge = QLineEdit(self.settings.get("mkvmerge_path", ""))
        self.mkvextract = QLineEdit(self.settings.get("mkvextract_path", ""))
        self.videodiff = QLineEdit(self.settings.get("videodiff_path", ""))
        layout.addRow("FFmpeg path", self.ffmpeg)
        layout.addRow("FFprobe path", self.ffprobe)
        layout.addRow("mkvmerge path", self.mkvmerge)
        layout.addRow("mkvextract path", self.mkvextract)
        layout.addRow("VideoDiff path", self.videodiff)
        self.tabs.addTab(w, "Storage")

    def _build_analysis(self):
        w = QWidget(); layout = QFormLayout(w)
        self.workflow = QComboBox(); self.workflow.addItems(["Analyze Only", "Analyze & Merge"])
        self.workflow.setCurrentText(self.settings.get("workflow", "Analyze & Merge"))
        layout.addRow("Workflow", self.workflow)
        self.mode = QComboBox(); self.mode.addItems(["Audio Correlation", "VideoDiff"])
        self.mode.setCurrentText(self.settings.get("analysis_mode", "Audio Correlation"))
        layout.addRow("Mode", self.mode)
        self.scan_cnt = QSpinBox(); self.scan_cnt.setRange(1, 500); self.scan_cnt.setValue(int(self.settings.get("scan_chunk_count", 10)))
        self.scan_dur = QSpinBox(); self.scan_dur.setRange(1, 3600); self.scan_dur.setValue(int(self.settings.get("scan_chunk_duration", 15)))
        self.min_match = QDoubleSpinBox(); self.min_match.setRange(0.0, 100.0); self.min_match.setDecimals(3); self.min_match.setSingleStep(0.5); self.min_match.setValue(float(self.settings.get("min_match_pct", 5.0)))
        self.vd_min = QDoubleSpinBox(); self.vd_min.setRange(0.0, 10000.0); self.vd_min.setDecimals(3); self.vd_min.setValue(float(self.settings.get("videodiff_error_min", 0.0)))
        self.vd_max = QDoubleSpinBox(); self.vd_max.setRange(0.0, 10000.0); self.vd_max.setDecimals(3); self.vd_max.setValue(float(self.settings.get("videodiff_error_max", 100.0)))
        layout.addRow("Scan chunk count", self.scan_cnt)
        layout.addRow("Chunk duration (s)", self.scan_dur)
        layout.addRow("Minimum match %", self.min_match)
        layout.addRow("Min error (VideoDiff)", self.vd_min)
        layout.addRow("Max error (VideoDiff)", self.vd_max)
        self.tabs.addTab(w, "Analysis")

    def _build_global(self):
        w = QWidget(); layout = QFormLayout(w)
        self.chk_jpn_sec = QCheckBox(); self.chk_jpn_sec.setChecked(bool(self.settings.get("match_jpn_secondary", True)))
        self.chk_jpn_ter = QCheckBox(); self.chk_jpn_ter.setChecked(bool(self.settings.get("match_jpn_tertiary", True)))
        self.chk_rm_dn = QCheckBox(); self.chk_rm_dn.setChecked(bool(self.settings.get("apply_dialog_norm_gain", False)))
        self.chk_first_sub = QCheckBox(); self.chk_first_sub.setChecked(bool(self.settings.get("first_sub_default", True)))
        layout.addRow("Prefer JPN audio on Secondary", self.chk_jpn_sec)
        layout.addRow("Prefer JPN audio on Tertiary", self.chk_jpn_ter)
        layout.addRow("Remove dialog normalization (AC-3/eAC-3)", self.chk_rm_dn)
        layout.addRow("First subtitle default", self.chk_first_sub)
        self.chk_snap = QCheckBox(); self.chk_snap.setChecked(bool(self.settings.get("snap_chapters", False)))
        self.snap_ms = QSpinBox(); self.snap_ms.setRange(0, 10000); self.snap_ms.setValue(int(self.settings.get("snap_threshold_ms", 250)))
        self.chk_snap_starts = QCheckBox(); self.chk_snap_starts.setChecked(bool(self.settings.get("snap_starts_only", True)))
        layout.addRow("Snap chapters to keyframes", self.chk_snap)
        layout.addRow("Snap threshold (ms)", self.snap_ms)
        layout.addRow("Snap starts only", self.chk_snap_starts)
        self.tabs.addTab(w, "Global")

    def _build_logging(self):
        w = QWidget(); layout = QFormLayout(w)
        self.log_compact = QCheckBox(); self.log_compact.setChecked(bool(self.settings.get("log_compact", True)))
        self.log_tail = QSpinBox(); self.log_tail.setRange(0, 10000); self.log_tail.setValue(int(self.settings.get("log_tail_lines", 0)))
        self.log_error_tail = QSpinBox(); self.log_error_tail.setRange(0, 10000); self.log_error_tail.setValue(int(self.settings.get("log_error_tail", 20)))
        self.log_progress = QSpinBox(); self.log_progress.setRange(1, 10000); self.log_progress.setValue(int(self.settings.get("log_progress_step", 20)))
        self.log_pretty = QCheckBox(); self.log_pretty.setChecked(bool(self.settings.get("log_show_options_pretty", False)))
        self.log_json = QCheckBox(); self.log_json.setChecked(bool(self.settings.get("log_show_options_json", False)))
        self.log_autoscroll = QCheckBox(); self.log_autoscroll.setChecked(bool(self.settings.get("log_autoscroll", True)))
        self.log_snap_verbose = QCheckBox(); self.log_snap_verbose.setChecked(bool(self.settings.get("chapter_snap_verbose", False)))
        self.log_snap_compact = QCheckBox(); self.log_snap_compact.setChecked(bool(self.settings.get("chapter_snap_compact", True)))
        layout.addRow("Compact log", self.log_compact)
        layout.addRow("Tail lines", self.log_tail)
        layout.addRow("Error tail", self.log_error_tail)
        layout.addRow("Progress step", self.log_progress)
        layout.addRow("Show options (pretty)", self.log_pretty)
        layout.addRow("Show options (json)", self.log_json)
        layout.addRow("Autoscroll log", self.log_autoscroll)
        layout.addRow("Chapter snap verbose", self.log_snap_verbose)
        layout.addRow("Chapter snap compact", self.log_snap_compact)
        self.tabs.addTab(w, "Logging")

    def _build_appearance(self):
        w = QWidget(); layout = QFormLayout(w)
        self.font_family = QLineEdit(self.settings.get("font_family", ""))
        self.font_size = QSpinBox(); self.font_size.setRange(6, 48); self.font_size.setValue(int(self.settings.get("font_point_size", 10)))
        self.row_spacing = QSpinBox(); self.row_spacing.setRange(0, 48); self.row_spacing.setValue(int(self.settings.get("row_spacing_px", 8)))
        self.input_height = QSpinBox(); self.input_height.setRange(20, 96); self.input_height.setValue(int(self.settings.get("input_height_px", 32)))
        layout.addRow("Font family (leave blank for default)", self.font_family)
        layout.addRow("Font size (pt)", self.font_size)
        layout.addRow("Row spacing (px)", self.row_spacing)
        layout.addRow("Input height (px)", self.input_height)
        self.tabs.addTab(w, "Appearance")

    def _with_browse(self, edit: QLineEdit, btn: QPushButton) -> QWidget:
        row = QHBoxLayout(); w = QWidget(); w.setLayout(row); row.addWidget(edit, 1); row.addWidget(btn, 0); return w

    def _browse_dir(self, edit: QLineEdit):
        from PySide6.QtWidgets import QFileDialog
        path = QFileDialog.getExistingDirectory(self, "Select Folder", edit.text() or "")
        if path: edit.setText(path)

    def on_save(self):
        s = self.settings
        s.set("output_folder", self.out_edit.text().strip())
        s.set("temp_root", self.tmp_edit.text().strip())
        s.set("ffmpeg_path", self.ffmpeg.text().strip())
        s.set("ffprobe_path", self.ffprobe.text().strip())
        s.set("mkvmerge_path", self.mkvmerge.text().strip())
        s.set("mkvextract_path", self.mkvextract.text().strip())
        s.set("videodiff_path", self.videodiff.text().strip())
        s.set("workflow", self.workflow.currentText())
        s.set("analysis_mode", self.mode.currentText())
        s.set("scan_chunk_count", int(self.scan_cnt.value()))
        s.set("scan_chunk_duration", int(self.scan_dur.value()))
        s.set("min_match_pct", float(self.min_match.value()))
        s.set("videodiff_error_min", float(self.vd_min.value()))
        s.set("videodiff_error_max", float(self.vd_max.value()))
        s.set("match_jpn_secondary", bool(self.chk_jpn_sec.isChecked()))
        s.set("match_jpn_tertiary", bool(self.chk_jpn_ter.isChecked()))
        s.set("apply_dialog_norm_gain", bool(self.chk_rm_dn.isChecked()))
        s.set("first_sub_default", bool(self.chk_first_sub.isChecked()))
        s.set("snap_chapters", bool(self.chk_snap.isChecked()))
        s.set("snap_threshold_ms", int(self.snap_ms.value()))
        s.set("snap_starts_only", bool(self.chk_snap_starts.isChecked()))
        s.set("log_compact", bool(self.log_compact.isChecked()))
        s.set("log_tail_lines", int(self.log_tail.value()))
        s.set("log_error_tail", int(self.log_error_tail.value()))
        s.set("log_progress_step", int(self.log_progress.value()))
        s.set("log_show_options_pretty", bool(self.log_pretty.isChecked()))
        s.set("log_show_options_json", bool(self.log_json.isChecked()))
        s.set("log_autoscroll", bool(self.log_autoscroll.isChecked()))
        s.set("chapter_snap_verbose", bool(self.log_snap_verbose.isChecked()))
        s.set("chapter_snap_compact", bool(self.log_snap_compact.isChecked()))
        s.set("font_family", self.font_family.text().strip())
        s.set("font_point_size", int(self.font_size.value()))
        s.set("row_spacing_px", int(self.row_spacing.value()))
        s.set("input_height_px", int(self.input_height.value()))
        s.save(); self.accept()

    def on_reload(self):
        self.settings.load()
        self.out_edit.setText(self.settings.get("output_folder", ""))
        self.tmp_edit.setText(self.settings.get("temp_root", ""))
        self.ffmpeg.setText(self.settings.get("ffmpeg_path", ""))
        self.ffprobe.setText(self.settings.get("ffprobe_path", ""))
        self.mkvmerge.setText(self.settings.get("mkvmerge_path", ""))
        self.mkvextract.setText(self.settings.get("mkvextract_path", ""))
        self.videodiff.setText(self.settings.get("videodiff_path", ""))
        self.workflow.setCurrentText(self.settings.get("workflow", "Analyze & Merge"))
        self.mode.setCurrentText(self.settings.get("analysis_mode", "Audio Correlation"))
        self.scan_cnt.setValue(int(self.settings.get("scan_chunk_count", 10)))
        self.scan_dur.setValue(int(self.settings.get("scan_chunk_duration", 15)))
        self.min_match.setValue(float(self.settings.get("min_match_pct", 5.0)))
        self.vd_min.setValue(float(self.settings.get("videodiff_error_min", 0.0)))
        self.vd_max.setValue(float(self.settings.get("videodiff_error_max", 100.0)))
        self.chk_jpn_sec.setChecked(bool(self.settings.get("match_jpn_secondary", True)))
        self.chk_jpn_ter.setChecked(bool(self.settings.get("match_jpn_tertiary", True)))
        self.chk_rm_dn.setChecked(bool(self.settings.get("apply_dialog_norm_gain", False)))
        self.chk_first_sub.setChecked(bool(self.settings.get("first_sub_default", True)))
        self.chk_snap.setChecked(bool(self.settings.get("snap_chapters", False)))
        self.snap_ms.setValue(int(self.settings.get("snap_threshold_ms", 250)))
        self.chk_snap_starts.setChecked(bool(self.settings.get("snap_starts_only", True)))
        self.log_compact.setChecked(bool(self.settings.get("log_compact", True)))
        self.log_tail.setValue(int(self.settings.get("log_tail_lines", 0)))
        self.log_error_tail.setValue(int(self.settings.get("log_error_tail", 20)))
        self.log_progress.setValue(int(self.settings.get("log_progress_step", 20)))
        self.log_pretty.setChecked(bool(self.settings.get("log_show_options_pretty", False)))
        self.log_json.setChecked(bool(self.settings.get("log_show_options_json", False)))
        self.log_autoscroll.setChecked(bool(self.settings.get("log_autoscroll", True)))
        self.log_snap_verbose.setChecked(bool(self.settings.get("chapter_snap_verbose", False)))
        self.log_snap_compact.setChecked(bool(self.settings.get("chapter_snap_compact", True)))
